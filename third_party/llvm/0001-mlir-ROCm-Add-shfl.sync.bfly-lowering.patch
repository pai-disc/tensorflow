diff --git a/mlir/include/mlir/Dialect/LLVMIR/ROCDLOps.td b/mlir/include/mlir/Dialect/LLVMIR/ROCDLOps.td
index bd80bde25960..33d4f031b0ba 100644
--- a/mlir/include/mlir/Dialect/LLVMIR/ROCDLOps.td
+++ b/mlir/include/mlir/Dialect/LLVMIR/ROCDLOps.td
@@ -179,4 +179,16 @@ def ROCDL_MubufStoreOp :
   let hasCustomAssemblyFormat = 1;
 }
 
+def ROCDL_ShflBflyOp :
+  ROCDL_Op<"shfl.sync.bfly">,
+  Results<(outs LLVM_Type:$res)>,
+  Arguments<(ins LLVM_Type:$active_mask,
+                 LLVM_Type:$val,
+                 LLVM_Type:$offset,
+                 LLVM_Type:$mask_and_clamp)> {
+  string llvmBuilder = [{
+      $res = createAMDGPUShflBfly($val, $offset, $mask_and_clamp, builder);
+  }];
+}
+
 #endif // ROCDLIR_OPS
diff --git a/mlir/lib/Target/LLVMIR/Dialect/ROCDL/ROCDLToLLVMIRTranslation.cpp b/mlir/lib/Target/LLVMIR/Dialect/ROCDL/ROCDLToLLVMIRTranslation.cpp
index 5bc02dc55270..d2c176da50ec 100644
--- a/mlir/lib/Target/LLVMIR/Dialect/ROCDL/ROCDLToLLVMIRTranslation.cpp
+++ b/mlir/lib/Target/LLVMIR/Dialect/ROCDL/ROCDLToLLVMIRTranslation.cpp
@@ -42,6 +42,77 @@ static llvm::Value *createDeviceFunctionCall(llvm::IRBuilderBase &builder,
   return builder.CreateCall(fn, ArrayRef<llvm::Value *>(fnOp0));
 }
 
+/// Lowers a shuffle to the corresponding ROCDL op.
+/// Ref:
+/// https://github.com/ROCm-Developer-Tools/hipamd/blob/master/include/hip/amd_detail/amd_device_functions.h
+/// ```
+/// __device__
+/// inline
+/// int __shfl_xor(int var, int offset, int width = warpSize) {
+///     int self = __lane_id();
+///     int index = self^offset;
+///     index = index >= ((self+width)&~(width-1))?self:index;
+///     return __builtin_amdgcn_ds_bpermute(index<<2, var);
+/// }```
+///
+/// Lowers a shuffle to the corresponding ROCDL op.
+///
+/// maskAndClamp (specifying the highest lane which participates in the
+/// shuffle).
+///
+///     %one = llvm.constant(1 : i32) : i32
+///     %two = llvm.constant(2 : i32) : i32
+///     %width = llvm.add %mask_and_clamp, %one : i32
+///     %self = @call __ockl_lane_u32() : i32
+///     %index = llvm.xor %self, %offset : i32
+///     %self_add = llvm.add %self, %width : i32
+///     %bit_rvs_mask = llvm.not %mask_and_clamp: i32
+///     %upper_bound = llvm.and %self_add, %bit_rvs_mask: i32
+///     %cond_cmp = llvm.icmp %index, %upper_bound { predicate = 'sge' }: i1
+///     %dst_index = llvm.select %cond_cmp, %self, %index : i32
+///     %shl_index = llvm.shl %dst_index, %two : i32
+///     @call __amdgcn_ds_bpermute(shl_index, %var)
+///
+static llvm::Value *createAMDGPUShflBfly(llvm::Value *value,
+                                         llvm::Value *offset,
+                                         llvm::Value *mask_and_clamp,
+                                         llvm::IRBuilderBase &builder) {
+
+  // CHECK_EQ(value->getType()->getPrimitiveSizeInBits(), 32);
+  llvm::Module *module = builder.GetInsertBlock()->getModule();
+  auto valueTy = value->getType();
+  auto int32Type = builder.getInt32Ty();
+
+  auto function_type = llvm::FunctionType::get(int32Type, false);
+  auto fn = dyn_cast<llvm::Function>(
+      module->getOrInsertFunction("__ockl_lane_u32", function_type)
+          .getCallee());
+  auto self = builder.CreateCall(fn);
+
+  auto one = builder.getInt32(1);
+  auto two = builder.getInt32(2);
+  auto width = builder.CreateAdd(mask_and_clamp, one);
+  auto index = builder.CreateXor(self, offset);
+  auto self_add = builder.CreateAdd(self, width);
+  auto bitnot_mask = builder.CreateNot(mask_and_clamp);
+  auto upper_bound = builder.CreateAnd(self_add, bitnot_mask);
+  auto cond_cmp = builder.CreateICmp(llvm::CmpInst::Predicate::ICMP_SGE, index,
+                                     upper_bound);
+  auto dst_index = builder.CreateSelect(cond_cmp, self, index);
+  auto shl_index = builder.CreateShl(dst_index, two);
+
+  auto i32_value = builder.CreateBitCast(value, int32Type);
+
+  auto function_type2 =
+      llvm::FunctionType::get(int32Type, {int32Type, int32Type}, false);
+  auto fn2 = dyn_cast<llvm::Function>(
+      module->getOrInsertFunction("__amdgcn_ds_bpermute", function_type2)
+          .getCallee());
+  auto shfl_value = builder.CreateCall(fn2, {shl_index, i32_value});
+
+  return builder.CreateBitCast(shfl_value, valueTy);
+}
+
 namespace {
 /// Implementation of the dialect interface that converts operations belonging
 /// to the ROCDL dialect to LLVM IR.
